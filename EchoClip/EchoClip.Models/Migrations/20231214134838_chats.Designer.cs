// <auto-generated />
using System;
using EchoClip.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EchoClip.Models.Migrations
{
    [DbContext(typeof(DatabaseEchoClipContext))]
    [Migration("20231214134838_chats")]
    partial class chats
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("EchoClip.Models.Chats", b =>
                {
                    b.Property<Guid>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("EchoClip.Models.ChatsVoiceRecordings", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoiceRecordingsId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatId", "VoiceRecordingsId");

                    b.HasIndex("VoiceRecordingsId");

                    b.ToTable("ChatsVoiceRecordings");
                });

            modelBuilder.Entity("EchoClip.Models.FriendInvates", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserFriendInvatesId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.ToTable("FriendInvates");
                });

            modelBuilder.Entity("EchoClip.Models.Friends", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserFriendId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("EchoClip.Models.Users", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EchoClip.Models.UsersChats", b =>
                {
                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.HasKey("UsersId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UsersChats");
                });

            modelBuilder.Entity("EchoClip.Models.VoiceRecordings", b =>
                {
                    b.Property<Guid>("VoideRecodingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Recording")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("UploadDataTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("VoideRecodingId");

                    b.ToTable("VoiceRecordings");
                });

            modelBuilder.Entity("EchoClip.Models.ChatsVoiceRecordings", b =>
                {
                    b.HasOne("EchoClip.Models.Chats", null)
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EchoClip.Models.VoiceRecordings", null)
                        .WithMany()
                        .HasForeignKey("VoiceRecordingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EchoClip.Models.UsersChats", b =>
                {
                    b.HasOne("EchoClip.Models.Chats", null)
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EchoClip.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
